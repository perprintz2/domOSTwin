% x= [[0, room2Tmp, 0];
%     [0, 0, room2Tmp];
%     [0, corTmp, 0];
%     [0, 0, corTmp];
%     [0, corHumi, 0];
%     [0, 0, corHumi];
%     [0, corCo2, 0];
%     [0, 0, corCo2];
%     [0, room1Tmp, 0];
%     [0, 0, room1Tmp];
%     [0, room1Humi, 0];
%     [0, 0, room1Humi];
%     [0, room1Co2, 0];
%     [0, 0, room1Co2];    
%     [0, room2Humi, 0];
%     [0, 0, room2Humi];
%     [0, room2Co2, 0];
%     [0, 0, room2Co2];  
%     [0, windSp, 0];
%     [0, 0, windSp];
%     [0, outTmp, 0];
%     [0, 0, outTmp];
%     [0, SunPower, 0];
%     [0, 0, SunPower];
%     [0, diffInTemp, 0];
%     [0, 0, diffInTemp];
%     [0, InletF, 0];
%     [0, 0, InletF]];

x= [[0, room2Tmp, 0];
    [0, 0, room2Tmp];  
    [0, room2Humi, 0];
    [0, 0, room2Humi];
    [0, room2Co2, 0];
    [0, 0, room2Co2];  
    [0, windSp, 0];
    [0, 0, windSp];
    [0, outTmp, 0];
    [0, 0, outTmp];
    [0, SunPower, 0];
    [0, 0, SunPower]];


y= [room2Tmp, 0, 0];

xc= x(:,3:size(x,2)-2);
yc= y(:,3:size(y,2)-2);

[xcn,extx]= mapstd(xc);
[ycn,exty]= mapstd(yc);

save 'TrainedNet/Room2ext.mat' extx exty
fName= 'TrainedNet/Room2TempNN';
ysim= zeros(1,length(xcn));

errtottot=1e6;
for k=[8,10,12,14,16,18,20,24,28,32,40]

    %antN= k;
    antN= [k,4];
    errtotOld=1e6;

    for c= 1:10
        % Build the network
        nn_net = feedforwardnet(antN, 'trainlm'); % learning methode: Levenberg-Marquardt

        % nn_net = feedforwardnet(antN, 'traingd');
        nn_net.trainParam.epochs = 1000;

        % train the network using the default
        nn_net = train(nn_net,xcn,ycn);
        ysimOld= xcn(1,1);

        for l=1:length(xcn)-1
            ysim(l) = nn_net(xcn(:,l));
            xcn(1,l+1)= ysim(l);
            xcn(2,l+1)= ysimOld;
            ysimOld= ysim(l);
           
        end

        ytmp= mapstd('reverse',ysim,exty);
        err= yc-ytmp;
        errtotsim= err*err';
        %fprintf('s: %i n: %i - toterror %2.3d\n',c,k,errtotsim)
      
        ynet = nn_net(xcn);
        ytmp= mapstd('reverse',ynet,exty);
        err= yc-ytmp;
        errtot= err*err';
        if errtotsim < errtotOld
            fnameNy= [fName num2str(k) '.mat'];
            save(fnameNy, 'nn_net', 'errtotsim');
            errtotOld= errtotsim;
            fprintf('s: %i n: %i - toterror %2.3d\n',c,k,errtotsim)
            if errtottot > errtotsim
                fnameNy= [fName '.mat'];
                save(fnameNy, 'nn_net', 'errtotsim');
                errtottot=errtotsim;
                fprintf('Net saved\n');

            end
        end
        %fprintf('s: %i n: %i - toterror %2.3d\n',c,k,errtot)

    end

end

for k=[8,10,12,14,16,18,20,24,28,32,40]

    antN= k;
    %antN= [k,6];
    errtotOld=1e6;

    for c= 1:10
        % Build the network
        nn_net = feedforwardnet(antN, 'trainlm'); % learning methode: Levenberg-Marquardt

        % nn_net = feedforwardnet(antN, 'traingd');
        nn_net.trainParam.epochs = 1000;

        % train the network using the default
        nn_net = train(nn_net,xcn,ycn);
        ysimOld= xcn(1,1);

        for l=1:length(xcn)-1
            ysim(l) = nn_net(xcn(:,l));
            xcn(1,l+1)= ysim(l);
            xcn(2,l+1)= ysimOld;
            ysimOld= ysim(l);
           
        end

        ytmp= mapstd('reverse',ysim,exty);
        err= yc-ytmp;
        errtotsim= err*err';
        %fprintf('s: %i n: %i - toterror %2.3d\n',c,k,errtotsim)
      
        ynet = nn_net(xcn);
        ytmp= mapstd('reverse',ynet,exty);
        err= yc-ytmp;
        errtot= err*err';
        if errtotsim < errtotOld
            fnameNy= [fName num2str(k) '.mat'];
            save(fnameNy, 'nn_net', 'errtotsim');
            errtotOld= errtotsim;
            fprintf('s: %i n: %i - toterror %2.3d\n',c,k,errtotsim)
            if errtottot > errtotsim
                fnameNy= [fName '.mat'];
                save(fnameNy, 'nn_net', 'errtotsim');
                errtottot=errtotsim;
                fprintf('Net saved\n');

            end
        end
        %fprintf('s: %i n: %i - toterror %2.3d\n',c,k,errtot)

    end

end
